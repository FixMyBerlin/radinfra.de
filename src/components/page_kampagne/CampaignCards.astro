---
import StackedCard from '@components/cards/StackedCard.astro'
import StackedCardWrapper from '@components/cards/StackedCardWrapper.astro'
import { LinkExternal } from '@components/Link/LinkExternal'
import RectangleStack from 'astro-heroicons/solid/RectangleStack.astro'
import { campaignCategorySelect } from 'cms/utils/campaignCategorySelect'
import type { Campaign } from './types'

type Props = {
  /** @desc `Beispiel CATEGORY` where `CATEGORY` will be replaced */
  headlineTemplate: string
  campaigns: Campaign[]
  showEmptyCategories: boolean
}
const { headlineTemplate, campaigns, showEmptyCategories } = Astro.props

// The order in `campaignCategorySelect` specifies the order that we display the results in
const groupedCampaigns = new Map<Campaign['data']['category'], Campaign[]>()
campaignCategorySelect.forEach(({ value: key }) => {
  const value = campaigns.filter((c) => c.data.category === key)
  groupedCampaigns.set(key as Campaign['data']['category'], value)
})
// sortedCampaigns.forEach((campaign) => {
//   const key = campaign.data.category
//   const value = [...(groupedCampaigns.get(key) || []), campaign.data]
//   groupedCampaigns.set(key, value)
// })
---

{
  Array.from(groupedCampaigns.entries()).map(([categoryKey, categoryCampaigns]) => {
    const label = campaignCategorySelect.find((c) => c.value === categoryKey)?.label
    const headline = headlineTemplate.replace('CATEGORY', label || 'UNKOWN')

    if (categoryCampaigns.length === 0 && !showEmptyCategories) {
      return null
    }

    return (
      <>
        <StackedCardWrapper headline={headline} sectionClasses="mt-16">
          {categoryCampaigns.length === 0 && (
            <p class="col-span-2">
              <code>TODO</code> Kampagnen f√ºr diese Kategorie sind geplant.
            </p>
          )}

          {categoryCampaigns
            .filter((campaign) => campaign.data.visibility === 'promote')
            .map((campaign) => {
              return (
                <StackedCard
                  href={`/kampagnen/${campaign.id.replace('/index', '')}`}
                  title={campaign.data.name}
                  variant="iconGrid"
                >
                  <RectangleStack class="size-14" />
                </StackedCard>
              )
            })}
        </StackedCardWrapper>

        <ul>
          {categoryCampaigns
            .filter(
              (campaign) =>
                campaign.data.visibility !== 'promote' &&
                campaign.data.maprouletteChallenge.discriminant === true,
            )
            .map((campaign) => {
              return (
                <li>
                  <LinkExternal href={`/kampagnen/${campaign.id.replace('/index', '')}`}>
                    {campaign.data.name}
                  </LinkExternal>
                </li>
              )
            })}
          {categoryCampaigns
            .filter(
              (campaign) =>
                campaign.data.visibility !== 'promote' &&
                campaign.data.maprouletteChallenge.discriminant === false,
            )
            .map((campaign) => {
              return (
                <li class="text-gray-400">
                  <LinkExternal
                    href={`/kampagnen/${campaign.id.replace('/index', '')}`}
                    className="text-gray-400"
                  >
                    {campaign.data.name}
                  </LinkExternal>{' '}
                  (reine Karten-Darstellung)
                </li>
              )
            })}
        </ul>
      </>
    )
  })
}
